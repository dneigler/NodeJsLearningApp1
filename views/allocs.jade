form(action='/signup',method='post')
    label Enter your name:
        input(name='username')
    div(data-role='fieldcontain')
        label(for='savename') Save
        input(type='submit', name='savename', value='Submit Name')

table
  caption Resource Allocations Table
  colgroup
  colgroup(span='2', title='Title')
  thead
    tr
      th(scope="col") Month
      th(scope="col") Name
      th(scope="col") Allocation Percentage
      th(scope="col") Project
      th(scope="col") _id
      th(scope="col") Save
  tfoot
    tr
      td END
  tbody(data-bind="foreach: Rows")
    tr(class='AllocationRow')
      td(data-bind="text: new Date(Date.parse(Month())).format('mmm-yy')")
      td
        a(data-bind="attr: {href: '/allocs/' + Name()}, text: Name")
      td
        input(class="AllocationPercentageInput", type='text', data-bind="value: AllocationPercentage")
      td(data-bind="text:Project")
      td(class="AllocationId", data-bind="text: _id")
      td
        input(type='button', onclick='saveUsers();', value='Save Changes')

script(type='text/javascript')
    // test
    $(document).ready(function() {
      // Handler for .ready() called.
      var currRow = null;
      var xTriggered = 0;
      $('.AllocationRow').hover(
        function() {
          // console.log("hovering");
          $(this).addClass("hover");
          // track the row we are in
          currRow = $(this);
        },
        function() {
          $(this).removeClass("hover");
          currRow = null;
        });

      var keyToAllocMappings = {48:0, 49: .25, 50: .50, 51: .75, 52: 1};
      $(document).keydown(function(event) {
        // 48=0, 49=1, 50=2, 51=3, 52=4
        if (currRow == null) return;
        if (event.which >= 48 && event.which <= 52) {
          // adjust the allocation for this row
          // event.preventDefault();
          var idToGet = currRow.find('.AllocationId').text();
          console.log(idToGet);
          var itemToChange = ko.utils.arrayFirst(vm.Rows(), function(item) {
            return item._id() == idToGet;
          });
          if (itemToChange != null)
            itemToChange.AllocationPercentage(keyToAllocMappings[event.which]);
         } else if (event.which == 27) { // escape key
          event.preventDefault();
         }
         xTriggered++;
         var msg = 'Handler for .keydown() called ' + xTriggered + ' time(s).  ' + currRow;
         console.log(currRow);
         console.log(msg);
        
      });
      var s1 = {"val": 1 };
      var s2 = {"val": .75, "nextval": s1};
      var s3 = {"val":.50, "nextval": s2};
      var s4 = {"val":.25, "nextval": s3};
      var s5 = {"val":0, "nextval": s4};
      s1.nextval = s5;
      s1.prevval = s2;
      s2.prevval = s3;
      s3.prevval = s4;
      s4.prevval = s5;
      s5.prevval = s1;
      var vals = [ s1, s2, s3, s4, s5 ];

      $('.AllocationPercentageInput').keydown(function(event) {
        console.log(event.which + " pressed on .AllocationPercentageInput");
          event.preventDefault();

          // cycle through values if possible
          var currVal = ko.utils.arrayFirst(vals, function(item) {
              return item.val == $(event.srcElement).val(); // $(this).val();
          });
          var idToGet = $(this).parent().parent().find('.AllocationId').text();
          console.log(idToGet);
          var itemToChange = ko.utils.arrayFirst(vm.Rows(), function(item) {
            return item._id() == idToGet;
          });
          if (itemToChange != null && event.which != 40)
            itemToChange.AllocationPercentage(currVal.nextval.val);
          else // 40 is the down arrow which will use previous value
            itemToChange.AllocationPercentage(currVal.prevval.val);
          // console.log(currVal.nextval);
        });
    });
    var socket = io.connect();
      socket.on('news', function (data) {
        console.log(data);
        socket.emit('my other event', { my: 'data' });
      });
      socket.on('auditTrail', function(data) {
        console.log(data);
        var atData = ko.mapping.fromJS(data);
        // update knockout array
        vm.AuditTrailObjects.Rows.push(atData);
      });
      socket.on('Users', function(data) {
        console.log(data);
        // for now just replace
        vm.Rows(data.Rows);

      });
      socket.on('NewUser', function(data) {
        console.log('NewUser received: ');
         console.log(data);
         var obj = ko.mapping.fromJS(data);
         vm.Rows.push(obj);
      });
    var vmData = !{JSON.stringify(allocs)};

    var vm = ko.mapping.fromJS(vmData);

    ko.applyBindings(vm);

    function saveUsers() {

        var jsonData = ko.toJS(vm);
        // alert(jsonData);
        // alert(JSON.stringify(jsonData));
        $.ajax({
          url: '/saveUsers',
          type: 'POST',
          dataType:'JSON',
          data: {workaround: JSON.stringify(jsonData)},
          success: function(response){
          }
        });
    }